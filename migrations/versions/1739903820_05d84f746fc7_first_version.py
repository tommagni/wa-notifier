"""Initial schema: sender and group tables, vector extension, and index

Revision ID: 05d84f746fc7
Revises:
Create Date: 2025-02-18 18:37:32.975434

"""

from typing import Sequence, Union

from alembic import op
import pgvector
import pgvector.sqlalchemy
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = "05d84f746fc7"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create the vector extension for pgvector support
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")

    # Create sender table (required for group.owner_jid foreign key)
    op.create_table(
        "sender",
        sa.Column("jid", sa.String(length=255), primary_key=True),
        sa.Column("push_name", sa.String(length=255), nullable=True),
    )

    # Create group table
    op.create_table(
        "group",
        sa.Column("group_jid", sa.String(length=255), primary_key=True),
        sa.Column("group_name", sa.String(length=255), nullable=True),
        sa.Column("group_topic", sa.Text(), nullable=True),
        sa.Column(
            "owner_jid",
            sa.String(length=255),
            sa.ForeignKey("sender.jid"),
            nullable=True,
        ),
        sa.Column(
            "managed", sa.Boolean(), nullable=False, server_default=sa.text("false")
        ),
        sa.Column("community_keys", sa.ARRAY(sa.String()), nullable=True),
    )

    op.create_table(
        "message",
        sa.Column("message_id", sa.String(length=255), primary_key=True),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("media_url", sa.String(length=255), nullable=True),
        sa.Column("sender_jid", sa.String(length=255), nullable=True),
        sa.Column("chat_jid", sa.String(length=255), nullable=True),
        sa.Column(
            "group_jid",
            sa.String(length=255),
            sa.ForeignKey("group.group_jid"),
            nullable=True,
        ),
        sa.Column("reply_to_id", sa.String(length=255), nullable=True),
    )

    # Add GIN index for community_keys
    op.create_index(
        "idx_group_community_keys",
        "group",
        ["community_keys"],
        unique=False,
        postgresql_using="gin",
    )

    op.create_table(
        "kbtopic",
        sa.Column("id", sa.String(length=255), primary_key=True),
        sa.Column(
            "group_jid",
            sa.String(length=255),
            sa.ForeignKey("group.group_jid"),
            nullable=True,
        ),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "embedding", pgvector.sqlalchemy.vector.VECTOR(dim=1024), nullable=False
        ),
        sa.Column("speakers", sa.Text(), nullable=False),
        sa.Column("subject", sa.Text(), nullable=False),
        sa.Column("summary", sa.Text(), nullable=False),
    )
    op.create_index(
        "kb_topic_embedding_idx",
        "kbtopic",
        ["embedding"],
        unique=False,
        postgresql_using="hnsw",
        postgresql_ops={"embedding": "vector_cosine_ops"},
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_group_community_keys", table_name="group", postgresql_using="gin"
    )
    op.drop_index(
        "kb_topic_embedding_idx",
        table_name="kbtopic",
        postgresql_using="hnsw",
        postgresql_ops={"embedding": "vector_l2_ops"},
    )
    op.drop_table("message")
    op.drop_table("group")
    op.drop_table("sender")
    op.drop_table("kbtopic")
    op.execute("DROP EXTENSION IF EXISTS vector;")
    # ### end Alembic commands ###
